  * vim plugins之 cscope.vim

<code bash>
if has("cscope")
set csprg=/usr/bin/cscope
set csto=0
set cst
set nocsverb
" add any database in current directory
"if filereadable("cscope.out")
"cs add cscope.out
" else add database pointed to by environment
"elseif $CSCOPE_DB 环境变量输出cscope路径
"CSCOPE_DB= ~/work/tags/mx-3.0-pre.cscope.out
"cs add /home/litao/work/kernel-samsung-4x12/cscope.out
cs add $CSCOPE_DB/cscope.out
"endif
set csverb
:map \ :cs find g <C-R>=expand("<cword>")<CR><CR>
:map s :cs find s <C-R>=expand("<cword>")<CR><CR>
:map t :cs find t <C-R>=expand("<cword>")<CR><CR>
:map c :cs find c <C-R>=expand("<cword>")<CR><CR>
:map C :cs find d <C-R>=expand("<cword>")<CR><CR>
:map f :cs find f <C-R>=expand("<cword>")<CR><CR>
endif
</code>

  * 内核源码树生成cscope
<code bash>
make xxx_defconfig
make cscope O=./  (O:生成绝对路径)
</code>

  * 简单脚本
<code bash>
#! /bin/sh 

TAG_DIR=~/tags/xxx/

case $1 in
        "make")
                #make xxx_defconfig
                echo "make cscope db"
                make cscope O=./ && mv cscope.* $TAG_DIR
        ;;

        "export")
                echo "export cscope db"
                export CSCOPE_DB=$TAG_DIR
                export | grep CSCOPE_DB
        ;;

        *)
                echo "useage:"
                echo "cscope make: make cscope db"
                echo ". ./cscope export: export cscope db"
        ;;
esac

</code>